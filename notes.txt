operation names

add_file
modify_file
delete_file
rename_file


// ok so current structure thinkign

DudleyCollectionManager

    holds
    the database we hold filesystem state while running

    holds the m_files
    - use the fileinfo database
dudley_fileinfo
Dudley



//t need to have in memory state to record local filesystem state
// would prefer to be able to no copy state from sql to do comparisons..
// but leave that for now..


// so to compare two states.. to find additions, deletions, modifications, and renames..

/* how to scan efficiently?
// need to get a complete list of all files in the collection (keep paths relative)

QString m_currentFilePath;
QFileInfo m_currentFileInfo;
m_repo_path = '/home/rob/pics'
QDirIterator it(m_repo_path);

while (it.hasNext()) {
  qDebug() << current_file_path = it.next(); 
  current_fileInfo = it.fileInfo();
  this a known filename?{
    is the mtime is equal to known mtime?{
      should be nothing to do
    }else file has been touched{
      need to compute the sha1 for this file
      write to log "modified file: name, size, mtime, sha1"
    }
  }else this is unknown filename{
    // this means the file is new or an existing file renamed
    // renaming a file does not alter the mtime on linux
      write to log "unknown file: name, size, mtime, sha1"
  }
  
}

*/

FileSystemState {
  new ( path ) 
  {
    take a state snapshot of the current filesystem
  }
  
  loadFromLog ( logfile ?) 
  {
    build the filesystem state from the history log
  }
  
  loadFromDB ( id or something )
  {
    load a state snapshot from the database into the current instance
  }
  
  compare {
    given another filesystemstate object produce a difference list in log format
  }
}





